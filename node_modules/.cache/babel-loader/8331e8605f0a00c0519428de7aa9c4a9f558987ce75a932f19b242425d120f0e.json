{"ast":null,"code":"import _objectSpread from \"/Users/mingquandong/Downloads/D\\u76D8/airBattleGame/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.object.values.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/web.timers.js\";\nimport { GAME_CONSTANTS } from '../utils/gameConstants';\nimport { checkCollision } from '../utils/collision';\nimport playerImage from '../assets/images/player.png';\nimport enemyImage from '../assets/images/enemy.png';\nimport bulletImage from '../assets/images/bullet.png';\nexport default {\n  name: 'GameCanvas',\n  data: function data() {\n    return {\n      canvasWidth: 400,\n      canvasHeight: 600,\n      ctx: null,\n      gameStarted: false,\n      gameOver: false,\n      score: 0,\n      player: {\n        x: 200,\n        y: 500,\n        width: 60,\n        height: 80,\n        speed: 5,\n        image: null\n      },\n      bullets: [],\n      enemies: [],\n      animationFrameId: null,\n      images: {\n        player: null,\n        enemy: null,\n        bullet: null\n      },\n      currentLevel: 1,\n      nextLevelScore: GAME_CONSTANTS.LEVELS[0].scoreToNext,\n      currentLevelConfig: GAME_CONSTANTS.LEVELS[0],\n      bombReady: true,\n      slowMotionReady: true,\n      bombCooldown: 10000,\n      // 10秒冷却\n      slowMotionCooldown: 15000,\n      bombCooldownTime: 0,\n      slowMotionCooldownTime: 0,\n      cooldownTimer: null,\n      sounds: {\n        shoot: null,\n        explosion: null,\n        powerup: null,\n        levelup: null,\n        bgm: null\n      },\n      isMuted: false,\n      powerups: [],\n      powerupTypes: {\n        SHIELD: 'shield',\n        RAPID_FIRE: 'rapid-fire',\n        DOUBLE_SCORE: 'double-score'\n      },\n      playerPowerups: {\n        shield: false,\n        rapidFire: false,\n        doubleScore: false\n      },\n      isPaused: false\n    };\n  },\n  mounted: function mounted() {\n    this.initCanvas();\n    this.loadImages();\n    this.loadSounds();\n\n    // 添加键盘事件监听\n    window.addEventListener('keydown', this.handleKeyPress);\n  },\n  methods: {\n    loadImages: function loadImages() {\n      // 加载玩家飞机图片\n      this.images.player = new Image();\n      this.images.player.src = playerImage;\n\n      // 加载敌机图片\n      this.images.enemy = new Image();\n      this.images.enemy.src = enemyImage;\n\n      // 加载子弹图片\n      this.images.bullet = new Image();\n      this.images.bullet.src = bulletImage;\n    },\n    loadSounds: function loadSounds() {\n      this.sounds.shoot = new Audio(require('../assets/sounds/shoot.mp3'));\n      this.sounds.explosion = new Audio(require('../assets/sounds/explosion.mp3'));\n      this.sounds.powerup = new Audio(require('../assets/sounds/powerup.mp3'));\n      this.sounds.levelup = new Audio(require('../assets/sounds/levelup.mp3'));\n      this.sounds.bgm = new Audio(require('../assets/sounds/bgm.mp3'));\n      this.sounds.bgm.loop = true;\n    },\n    initCanvas: function initCanvas() {\n      var canvas = this.$refs.gameCanvas;\n      this.ctx = canvas.getContext('2d');\n    },\n    startGame: function startGame() {\n      this.gameStarted = true;\n      this.gameOver = false;\n      this.score = 0;\n      this.currentLevel = 1;\n      this.currentLevelConfig = GAME_CONSTANTS.LEVELS[0];\n      this.nextLevelScore = this.currentLevelConfig.scoreToNext;\n      this.bullets = [];\n      this.enemies = [];\n      this.gameLoop();\n    },\n    gameLoop: function gameLoop() {\n      this.update();\n      this.draw();\n      this.animationFrameId = requestAnimationFrame(this.gameLoop);\n    },\n    update: function update() {\n      // 更新游戏状态\n      this.updateBullets();\n      this.updateEnemies();\n      this.checkCollisions();\n      this.updatePowerups();\n    },\n    draw: function draw() {\n      // 清空画布\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n      // 绘制玩家\n      this.drawPlayer();\n      // 绘制子弹\n      this.drawBullets();\n      // 绘制敌机\n      this.drawEnemies();\n    },\n    handleMouseMove: function handleMouseMove(e) {\n      if (!this.gameStarted || this.gameOver) return;\n      var rect = this.$refs.gameCanvas.getBoundingClientRect();\n      var x = e.clientX - rect.left;\n      this.player.x = Math.max(0, Math.min(x - this.player.width / 2, this.canvasWidth - this.player.width));\n    },\n    handleClick: function handleClick() {\n      if (!this.gameStarted || this.gameOver) return;\n      this.shoot();\n    },\n    drawPlayer: function drawPlayer() {\n      if (this.images.player) {\n        this.ctx.drawImage(this.images.player, this.player.x, this.player.y, this.player.width, this.player.height);\n      }\n    },\n    shoot: function shoot() {\n      var _this = this;\n      // 根据当前关卡设置子弹数量和扩散角度\n      var bulletCount, spread;\n      switch (this.currentLevel) {\n        case 1:\n          bulletCount = 1;\n          spread = 0;\n          break;\n        case 2:\n          bulletCount = 2;\n          spread = 5; // 10度角扩散（每边5度）\n          break;\n        case 3:\n          bulletCount = 3;\n          spread = 7.5; // 15度角扩散（每边7.5度）\n          break;\n        case 4:\n          bulletCount = 3;\n          spread = 10; // 20度角扩散（每边10度）\n          break;\n        case 5:\n          bulletCount = 4;\n          spread = 12.5; // 25度角扩散（每边12.5度）\n          break;\n      }\n\n      // 计算子弹发射角度\n      var angles = [];\n      if (bulletCount === 1) {\n        angles.push(0); // 单发子弹直射\n      } else {\n        // 计算多发子弹的角度\n        var step = spread * 2 / (bulletCount - 1);\n        for (var i = 0; i < bulletCount; i++) {\n          angles.push(-spread + step * i);\n        }\n      }\n\n      // 发射子弹\n      angles.forEach(function (angle) {\n        var radian = angle * Math.PI / 180;\n        var bullet = {\n          x: _this.player.x + _this.player.width / 2 - GAME_CONSTANTS.BULLET_WIDTH / 2,\n          y: _this.player.y,\n          width: GAME_CONSTANTS.BULLET_WIDTH,\n          height: GAME_CONSTANTS.BULLET_HEIGHT,\n          speedX: Math.sin(radian) * GAME_CONSTANTS.BULLET_SPEED,\n          speedY: -Math.cos(radian) * GAME_CONSTANTS.BULLET_SPEED\n        };\n        _this.bullets.push(bullet);\n      });\n    },\n    updateBullets: function updateBullets() {\n      var _this2 = this;\n      this.bullets = this.bullets.filter(function (bullet) {\n        // 更新子弹位置，加入水平移动\n        bullet.x += bullet.speedX;\n        bullet.y += bullet.speedY;\n\n        // 检查子弹是否在画布范围内\n        return bullet.y + bullet.height > 0 && bullet.x + bullet.width > 0 && bullet.x < _this2.canvasWidth;\n      });\n    },\n    drawBullets: function drawBullets() {\n      var _this3 = this;\n      if (this.images.bullet) {\n        this.bullets.forEach(function (bullet) {\n          // 根据子弹角度旋转画布\n          _this3.ctx.save();\n          var angle = Math.atan2(bullet.speedX, -bullet.speedY);\n          _this3.ctx.translate(bullet.x + bullet.width / 2, bullet.y + bullet.height / 2);\n          _this3.ctx.rotate(angle);\n          _this3.ctx.drawImage(_this3.images.bullet, -bullet.width / 2, -bullet.height / 2, bullet.width, bullet.height);\n          _this3.ctx.restore();\n        });\n      }\n    },\n    spawnEnemy: function spawnEnemy() {\n      var enemy = {\n        x: Math.random() * (this.canvasWidth - GAME_CONSTANTS.ENEMY_WIDTH),\n        y: -GAME_CONSTANTS.ENEMY_HEIGHT,\n        width: GAME_CONSTANTS.ENEMY_WIDTH,\n        height: GAME_CONSTANTS.ENEMY_HEIGHT,\n        speed: GAME_CONSTANTS.ENEMY_SPEED\n      };\n      this.enemies.push(enemy);\n    },\n    updateEnemies: function updateEnemies() {\n      var _this4 = this;\n      this.enemies = this.enemies.filter(function (enemy) {\n        enemy.y += _this4.currentLevelConfig.enemySpeed;\n        return enemy.y < _this4.canvasHeight;\n      });\n      if (Math.random() < this.currentLevelConfig.spawnRate) {\n        this.spawnEnemy();\n      }\n    },\n    drawEnemies: function drawEnemies() {\n      var _this5 = this;\n      if (this.images.enemy) {\n        this.enemies.forEach(function (enemy) {\n          _this5.ctx.drawImage(_this5.images.enemy, enemy.x, enemy.y, enemy.width, enemy.height);\n        });\n      }\n    },\n    checkCollisions: function checkCollisions() {\n      var _this6 = this;\n      // 检查子弹与敌机的碰撞\n      this.bullets.forEach(function (bullet, bulletIndex) {\n        _this6.enemies.forEach(function (enemy, enemyIndex) {\n          if (checkCollision(bullet, enemy)) {\n            _this6.bullets.splice(bulletIndex, 1);\n            _this6.enemies.splice(enemyIndex, 1);\n            _this6.score += 100;\n            _this6.checkLevelUp();\n          }\n        });\n      });\n\n      // 检查玩家与敌机的碰撞\n      this.enemies.forEach(function (enemy) {\n        if (checkCollision(_this6.player, enemy)) {\n          _this6.endGame();\n        }\n      });\n    },\n    endGame: function endGame() {\n      this.gameOver = true;\n      cancelAnimationFrame(this.animationFrameId);\n    },\n    restartGame: function restartGame() {\n      this.startGame();\n    },\n    checkLevelUp: function checkLevelUp() {\n      if (this.score >= this.nextLevelScore && this.currentLevel < 5) {\n        this.currentLevel++;\n        this.currentLevelConfig = GAME_CONSTANTS.LEVELS[this.currentLevel - 1];\n        this.nextLevelScore = this.currentLevelConfig.scoreToNext;\n        this.showLevelUpMessage();\n      }\n    },\n    showLevelUpMessage: function showLevelUpMessage() {\n      var ctx = this.ctx;\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n      ctx.fillRect(this.canvasWidth / 4, this.canvasHeight / 2 - 40, this.canvasWidth / 2, 80);\n      ctx.fillStyle = '#000';\n      ctx.font = '24px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(\"\\u5347\\u7EA7\\u5230\\u7B2C \".concat(this.currentLevel, \" \\u5173\\uFF01\"), this.canvasWidth / 2, this.canvasHeight / 2);\n    },\n    useBomb: function useBomb() {\n      var _this7 = this;\n      if (!this.bombReady || !this.gameStarted || this.gameOver) return;\n\n      // 清除所有敌机并加分\n      this.enemies.forEach(function () {\n        _this7.score += 100;\n      });\n      this.enemies = [];\n\n      // 设置冷却和倒计时\n      this.bombReady = false;\n      this.bombCooldownTime = this.bombCooldown / 1000;\n      this.updateCooldown();\n      setTimeout(function () {\n        _this7.bombReady = true;\n        _this7.bombCooldownTime = 0;\n      }, this.bombCooldown);\n    },\n    useSlowMotion: function useSlowMotion() {\n      var _this8 = this;\n      if (!this.slowMotionReady || !this.gameStarted || this.gameOver) return;\n\n      // 减缓敌机速度和生成速率\n      var originalConfig = _objectSpread({}, this.currentLevelConfig);\n      this.currentLevelConfig = _objectSpread(_objectSpread({}, this.currentLevelConfig), {}, {\n        enemySpeed: this.currentLevelConfig.enemySpeed * 0.5,\n        spawnRate: this.currentLevelConfig.spawnRate * 0.5\n      });\n\n      // 设置冷却和倒计时\n      this.slowMotionReady = false;\n      this.slowMotionCooldownTime = this.slowMotionCooldown / 1000;\n      this.updateCooldown();\n\n      // 5秒后恢复正常速度\n      setTimeout(function () {\n        _this8.currentLevelConfig = originalConfig;\n      }, 5000);\n      setTimeout(function () {\n        _this8.slowMotionReady = true;\n        _this8.slowMotionCooldownTime = 0;\n      }, this.slowMotionCooldown);\n    },\n    updateCooldown: function updateCooldown() {\n      var _this9 = this;\n      if (this.cooldownTimer) {\n        clearInterval(this.cooldownTimer);\n      }\n      this.cooldownTimer = setInterval(function () {\n        if (_this9.bombCooldownTime > 0) {\n          _this9.bombCooldownTime--;\n        }\n        if (_this9.slowMotionCooldownTime > 0) {\n          _this9.slowMotionCooldownTime--;\n        }\n        if (_this9.bombCooldownTime === 0 && _this9.slowMotionCooldownTime === 0) {\n          clearInterval(_this9.cooldownTimer);\n        }\n      }, 1000);\n    },\n    handleKeyPress: function handleKeyPress(event) {\n      if (!this.gameStarted || this.gameOver) return;\n      switch (event.key) {\n        case ' ':\n          // 空格键\n          event.preventDefault(); // 防止页面滚动\n          this.useBomb();\n          break;\n        case 'Shift':\n          // Shift键\n          event.preventDefault();\n          this.useSlowMotion();\n          break;\n        case 'Escape':\n          event.preventDefault();\n          this.togglePause();\n          break;\n      }\n    },\n    playSound: function playSound(soundName) {\n      if (!this.isMuted && this.sounds[soundName]) {\n        this.sounds[soundName].currentTime = 0;\n        this.sounds[soundName].play();\n      }\n    },\n    toggleSound: function toggleSound() {\n      this.isMuted = !this.isMuted;\n      if (this.isMuted) {\n        this.sounds.bgm.pause();\n      } else {\n        this.sounds.bgm.play();\n      }\n    },\n    spawnPowerup: function spawnPowerup() {\n      if (Math.random() < 0.05) {\n        // 5%的概率生成道具\n        var types = Object.values(this.powerupTypes);\n        var randomType = types[Math.floor(Math.random() * types.length)];\n        var powerup = {\n          x: Math.random() * (this.canvasWidth - 30),\n          y: -30,\n          width: 30,\n          height: 30,\n          type: randomType,\n          speed: 2\n        };\n        this.powerups.push(powerup);\n      }\n    },\n    updatePowerups: function updatePowerups() {\n      var _this10 = this;\n      this.powerups = this.powerups.filter(function (powerup) {\n        powerup.y += powerup.speed;\n\n        // 检查玩家是否收集到道具\n        if (checkCollision(_this10.player, powerup)) {\n          _this10.collectPowerup(powerup.type);\n          return false;\n        }\n        return powerup.y < _this10.canvasHeight;\n      });\n    },\n    collectPowerup: function collectPowerup(type) {\n      var _this11 = this;\n      this.playSound('powerup');\n      var duration = 10000; // 10秒持续时间\n\n      switch (type) {\n        case this.powerupTypes.SHIELD:\n          this.playerPowerups.shield = true;\n          setTimeout(function () {\n            return _this11.playerPowerups.shield = false;\n          }, duration);\n          break;\n        case this.powerupTypes.RAPID_FIRE:\n          this.playerPowerups.rapidFire = true;\n          setTimeout(function () {\n            return _this11.playerPowerups.rapidFire = false;\n          }, duration);\n          break;\n        case this.powerupTypes.DOUBLE_SCORE:\n          this.playerPowerups.doubleScore = true;\n          setTimeout(function () {\n            return _this11.playerPowerups.doubleScore = false;\n          }, duration);\n          break;\n      }\n    },\n    togglePause: function togglePause() {\n      this.isPaused = !this.isPaused;\n      if (this.isPaused) {\n        cancelAnimationFrame(this.animationFrameId);\n      } else {\n        this.gameLoop();\n      }\n    }\n  },\n  beforeDestroy: function beforeDestroy() {\n    window.removeEventListener('keydown', this.handleKeyPress);\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n    }\n    if (this.cooldownTimer) {\n      clearInterval(this.cooldownTimer);\n    }\n  }\n};","map":{"version":3,"names":["GAME_CONSTANTS","checkCollision","playerImage","enemyImage","bulletImage","name","data","canvasWidth","canvasHeight","ctx","gameStarted","gameOver","score","player","x","y","width","height","speed","image","bullets","enemies","animationFrameId","images","enemy","bullet","currentLevel","nextLevelScore","LEVELS","scoreToNext","currentLevelConfig","bombReady","slowMotionReady","bombCooldown","slowMotionCooldown","bombCooldownTime","slowMotionCooldownTime","cooldownTimer","sounds","shoot","explosion","powerup","levelup","bgm","isMuted","powerups","powerupTypes","SHIELD","RAPID_FIRE","DOUBLE_SCORE","playerPowerups","shield","rapidFire","doubleScore","isPaused","mounted","initCanvas","loadImages","loadSounds","window","addEventListener","handleKeyPress","methods","Image","src","Audio","require","loop","canvas","$refs","gameCanvas","getContext","startGame","gameLoop","update","draw","requestAnimationFrame","updateBullets","updateEnemies","checkCollisions","updatePowerups","clearRect","drawPlayer","drawBullets","drawEnemies","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","Math","max","min","handleClick","drawImage","_this","bulletCount","spread","angles","push","step","i","forEach","angle","radian","PI","BULLET_WIDTH","BULLET_HEIGHT","speedX","sin","BULLET_SPEED","speedY","cos","_this2","filter","_this3","save","atan2","translate","rotate","restore","spawnEnemy","random","ENEMY_WIDTH","ENEMY_HEIGHT","ENEMY_SPEED","_this4","enemySpeed","spawnRate","_this5","_this6","bulletIndex","enemyIndex","splice","checkLevelUp","endGame","cancelAnimationFrame","restartGame","showLevelUpMessage","fillStyle","fillRect","font","textAlign","fillText","concat","useBomb","_this7","updateCooldown","setTimeout","useSlowMotion","_this8","originalConfig","_objectSpread","_this9","clearInterval","setInterval","event","key","preventDefault","togglePause","playSound","soundName","currentTime","play","toggleSound","pause","spawnPowerup","types","Object","values","randomType","floor","length","type","_this10","collectPowerup","_this11","duration","beforeDestroy","removeEventListener"],"sources":["src/components/GameCanvas.vue"],"sourcesContent":["<template>\n  <div class=\"game-container\">\n    <canvas\n      ref=\"gameCanvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousemove=\"handleMouseMove\"\n      @click=\"handleClick\"\n    ></canvas>\n    <div class=\"game-info\">\n      <div class=\"score\">得分: {{ score }}</div>\n      <div class=\"level\">关卡: {{ currentLevel }}</div>\n      <div class=\"next-level\" v-if=\"currentLevel < 5\">\n        距离下一关: {{ nextLevelScore - score }}\n      </div>\n    </div>\n    <div v-if=\"!gameStarted\" class=\"start-screen\">\n      <h2>飞机大战</h2>\n      <p>点击开始游戏</p>\n      <button @click=\"startGame\">开始游戏</button>\n    </div>\n    <div v-if=\"gameOver\" class=\"game-over\">\n      <h2>游戏结束</h2>\n      <p>最终得分: {{ score }}</p>\n      <p>达到关卡: {{ currentLevel }}</p>\n      <button @click=\"restartGame\">重新开始</button>\n    </div>\n    <div class=\"skills\">\n      <button \n        @click=\"useBomb\" \n        :disabled=\"!bombReady\"\n        class=\"skill-btn\"\n      >\n        炸弹 (空格键)\n        <span v-if=\"bombCooldownTime > 0\" class=\"cooldown\">{{ bombCooldownTime }}s</span>\n      </button>\n      <button \n        @click=\"useSlowMotion\" \n        :disabled=\"!slowMotionReady\"\n        class=\"skill-btn\"\n      >\n        时间减速 (Shift键)\n        <span v-if=\"slowMotionCooldownTime > 0\" class=\"cooldown\">{{ slowMotionCooldownTime }}s</span>\n      </button>\n    </div>\n    <div v-if=\"isPaused\" class=\"pause-screen\">\n      <h2>游戏暂停</h2>\n      <button @click=\"togglePause\">继续游戏</button>\n    </div>\n    <button \n      @click=\"toggleSound\" \n      class=\"sound-btn\"\n    >\n      {{ isMuted ? '开启声音' : '关闭声音' }}\n    </button>\n    <div class=\"powerup-status\" v-if=\"gameStarted && !gameOver\">\n      <div v-if=\"playerPowerups.shield\" class=\"powerup-icon shield\">护盾</div>\n      <div v-if=\"playerPowerups.rapidFire\" class=\"powerup-icon rapid-fire\">快速射击</div>\n      <div v-if=\"playerPowerups.doubleScore\" class=\"powerup-icon double-score\">双倍得分</div>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { GAME_CONSTANTS } from '../utils/gameConstants'\nimport { checkCollision } from '../utils/collision'\nimport playerImage from '../assets/images/player.png'\nimport enemyImage from '../assets/images/enemy.png'\nimport bulletImage from '../assets/images/bullet.png'\n\nexport default {\n  name: 'GameCanvas',\n  data() {\n    return {\n      canvasWidth: 400,\n      canvasHeight: 600,\n      ctx: null,\n      gameStarted: false,\n      gameOver: false,\n      score: 0,\n      player: {\n        x: 200,\n        y: 500,\n        width: 60,\n        height: 80,\n        speed: 5,\n        image: null\n      },\n      bullets: [],\n      enemies: [],\n      animationFrameId: null,\n      images: {\n        player: null,\n        enemy: null,\n        bullet: null\n      },\n      currentLevel: 1,\n      nextLevelScore: GAME_CONSTANTS.LEVELS[0].scoreToNext,\n      currentLevelConfig: GAME_CONSTANTS.LEVELS[0],\n      bombReady: true,\n      slowMotionReady: true,\n      bombCooldown: 10000, // 10秒冷却\n      slowMotionCooldown: 15000,\n      bombCooldownTime: 0,\n      slowMotionCooldownTime: 0,\n      cooldownTimer: null,\n      sounds: {\n        shoot: null,\n        explosion: null,\n        powerup: null,\n        levelup: null,\n        bgm: null\n      },\n      isMuted: false,\n      powerups: [],\n      powerupTypes: {\n        SHIELD: 'shield',\n        RAPID_FIRE: 'rapid-fire',\n        DOUBLE_SCORE: 'double-score'\n      },\n      playerPowerups: {\n        shield: false,\n        rapidFire: false,\n        doubleScore: false\n      },\n      isPaused: false\n    }\n  },\n  mounted() {\n    this.initCanvas()\n    this.loadImages()\n    this.loadSounds()\n    \n    // 添加键盘事件监听\n    window.addEventListener('keydown', this.handleKeyPress)\n  },\n  methods: {\n    loadImages() {\n      // 加载玩家飞机图片\n      this.images.player = new Image()\n      this.images.player.src = playerImage\n      \n      // 加载敌机图片\n      this.images.enemy = new Image()\n      this.images.enemy.src = enemyImage\n      \n      // 加载子弹图片\n      this.images.bullet = new Image()\n      this.images.bullet.src = bulletImage\n    },\n    loadSounds() {\n      this.sounds.shoot = new Audio(require('../assets/sounds/shoot.mp3'));\n      this.sounds.explosion = new Audio(require('../assets/sounds/explosion.mp3'));\n      this.sounds.powerup = new Audio(require('../assets/sounds/powerup.mp3'));\n      this.sounds.levelup = new Audio(require('../assets/sounds/levelup.mp3'));\n      this.sounds.bgm = new Audio(require('../assets/sounds/bgm.mp3'));\n      this.sounds.bgm.loop = true;\n    },\n    initCanvas() {\n      const canvas = this.$refs.gameCanvas\n      this.ctx = canvas.getContext('2d')\n    },\n    startGame() {\n      this.gameStarted = true\n      this.gameOver = false\n      this.score = 0\n      this.currentLevel = 1\n      this.currentLevelConfig = GAME_CONSTANTS.LEVELS[0]\n      this.nextLevelScore = this.currentLevelConfig.scoreToNext\n      this.bullets = []\n      this.enemies = []\n      this.gameLoop()\n    },\n    gameLoop() {\n      this.update()\n      this.draw()\n      this.animationFrameId = requestAnimationFrame(this.gameLoop)\n    },\n    update() {\n      // 更新游戏状态\n      this.updateBullets()\n      this.updateEnemies()\n      this.checkCollisions()\n      this.updatePowerups()\n    },\n    draw() {\n      // 清空画布\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\n      // 绘制玩家\n      this.drawPlayer()\n      // 绘制子弹\n      this.drawBullets()\n      // 绘制敌机\n      this.drawEnemies()\n    },\n    handleMouseMove(e) {\n      if (!this.gameStarted || this.gameOver) return\n      const rect = this.$refs.gameCanvas.getBoundingClientRect()\n      const x = e.clientX - rect.left\n      this.player.x = Math.max(0, Math.min(x - this.player.width / 2, this.canvasWidth - this.player.width))\n    },\n    handleClick() {\n      if (!this.gameStarted || this.gameOver) return\n      this.shoot()\n    },\n    drawPlayer() {\n      if (this.images.player) {\n        this.ctx.drawImage(\n          this.images.player,\n          this.player.x,\n          this.player.y,\n          this.player.width,\n          this.player.height\n        )\n      }\n    },\n    shoot() {\n      // 根据当前关卡设置子弹数量和扩散角度\n      let bulletCount, spread;\n      switch (this.currentLevel) {\n        case 1:\n          bulletCount = 1;\n          spread = 0;\n          break;\n        case 2:\n          bulletCount = 2;\n          spread = 5; // 10度角扩散（每边5度）\n          break;\n        case 3:\n          bulletCount = 3;\n          spread = 7.5; // 15度角扩散（每边7.5度）\n          break;\n        case 4:\n          bulletCount = 3;\n          spread = 10; // 20度角扩散（每边10度）\n          break;\n        case 5:\n          bulletCount = 4;\n          spread = 12.5; // 25度角扩散（每边12.5度）\n          break;\n      }\n      \n      // 计算子弹发射角度\n      const angles = [];\n      if (bulletCount === 1) {\n        angles.push(0);  // 单发子弹直射\n      } else {\n        // 计算多发子弹的角度\n        const step = spread * 2 / (bulletCount - 1);\n        for (let i = 0; i < bulletCount; i++) {\n          angles.push(-spread + step * i);\n        }\n      }\n      \n      // 发射子弹\n      angles.forEach(angle => {\n        const radian = angle * Math.PI / 180;\n        const bullet = {\n          x: this.player.x + this.player.width / 2 - GAME_CONSTANTS.BULLET_WIDTH / 2,\n          y: this.player.y,\n          width: GAME_CONSTANTS.BULLET_WIDTH,\n          height: GAME_CONSTANTS.BULLET_HEIGHT,\n          speedX: Math.sin(radian) * GAME_CONSTANTS.BULLET_SPEED,\n          speedY: -Math.cos(radian) * GAME_CONSTANTS.BULLET_SPEED\n        }\n        this.bullets.push(bullet);\n      });\n    },\n    updateBullets() {\n      this.bullets = this.bullets.filter(bullet => {\n        // 更新子弹位置，加入水平移动\n        bullet.x += bullet.speedX;\n        bullet.y += bullet.speedY;\n        \n        // 检查子弹是否在画布范围内\n        return bullet.y + bullet.height > 0 && \n               bullet.x + bullet.width > 0 && \n               bullet.x < this.canvasWidth;\n      });\n    },\n    drawBullets() {\n      if (this.images.bullet) {\n        this.bullets.forEach(bullet => {\n          // 根据子弹角度旋转画布\n          this.ctx.save();\n          const angle = Math.atan2(bullet.speedX, -bullet.speedY);\n          this.ctx.translate(bullet.x + bullet.width/2, bullet.y + bullet.height/2);\n          this.ctx.rotate(angle);\n          this.ctx.drawImage(\n            this.images.bullet,\n            -bullet.width/2,\n            -bullet.height/2,\n            bullet.width,\n            bullet.height\n          );\n          this.ctx.restore();\n        });\n      }\n    },\n    spawnEnemy() {\n      const enemy = {\n        x: Math.random() * (this.canvasWidth - GAME_CONSTANTS.ENEMY_WIDTH),\n        y: -GAME_CONSTANTS.ENEMY_HEIGHT,\n        width: GAME_CONSTANTS.ENEMY_WIDTH,\n        height: GAME_CONSTANTS.ENEMY_HEIGHT,\n        speed: GAME_CONSTANTS.ENEMY_SPEED\n      }\n      this.enemies.push(enemy)\n    },\n    updateEnemies() {\n      this.enemies = this.enemies.filter(enemy => {\n        enemy.y += this.currentLevelConfig.enemySpeed\n        return enemy.y < this.canvasHeight\n      })\n\n      if (Math.random() < this.currentLevelConfig.spawnRate) {\n        this.spawnEnemy()\n      }\n    },\n    drawEnemies() {\n      if (this.images.enemy) {\n        this.enemies.forEach(enemy => {\n          this.ctx.drawImage(\n            this.images.enemy,\n            enemy.x,\n            enemy.y,\n            enemy.width,\n            enemy.height\n          )\n        })\n      }\n    },\n    checkCollisions() {\n      // 检查子弹与敌机的碰撞\n      this.bullets.forEach((bullet, bulletIndex) => {\n        this.enemies.forEach((enemy, enemyIndex) => {\n          if (checkCollision(bullet, enemy)) {\n            this.bullets.splice(bulletIndex, 1)\n            this.enemies.splice(enemyIndex, 1)\n            this.score += 100\n            this.checkLevelUp()\n          }\n        })\n      })\n\n      // 检查玩家与敌机的碰撞\n      this.enemies.forEach(enemy => {\n        if (checkCollision(this.player, enemy)) {\n          this.endGame()\n        }\n      })\n    },\n    endGame() {\n      this.gameOver = true\n      cancelAnimationFrame(this.animationFrameId)\n    },\n    restartGame() {\n      this.startGame()\n    },\n    checkLevelUp() {\n      if (this.score >= this.nextLevelScore && this.currentLevel < 5) {\n        this.currentLevel++\n        this.currentLevelConfig = GAME_CONSTANTS.LEVELS[this.currentLevel - 1]\n        this.nextLevelScore = this.currentLevelConfig.scoreToNext\n        this.showLevelUpMessage()\n      }\n    },\n    showLevelUpMessage() {\n      const ctx = this.ctx\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.8)'\n      ctx.fillRect(this.canvasWidth/4, this.canvasHeight/2 - 40, this.canvasWidth/2, 80)\n      ctx.fillStyle = '#000'\n      ctx.font = '24px Arial'\n      ctx.textAlign = 'center'\n      ctx.fillText(`升级到第 ${this.currentLevel} 关！`, this.canvasWidth/2, this.canvasHeight/2)\n    },\n    useBomb() {\n      if (!this.bombReady || !this.gameStarted || this.gameOver) return;\n      \n      // 清除所有敌机并加分\n      this.enemies.forEach(() => {\n        this.score += 100;\n      });\n      this.enemies = [];\n      \n      // 设置冷却和倒计时\n      this.bombReady = false;\n      this.bombCooldownTime = this.bombCooldown / 1000;\n      this.updateCooldown();\n      \n      setTimeout(() => {\n        this.bombReady = true;\n        this.bombCooldownTime = 0;\n      }, this.bombCooldown);\n    },\n    useSlowMotion() {\n      if (!this.slowMotionReady || !this.gameStarted || this.gameOver) return;\n      \n      // 减缓敌机速度和生成速率\n      const originalConfig = { ...this.currentLevelConfig };\n      this.currentLevelConfig = {\n        ...this.currentLevelConfig,\n        enemySpeed: this.currentLevelConfig.enemySpeed * 0.5,\n        spawnRate: this.currentLevelConfig.spawnRate * 0.5\n      };\n\n      // 设置冷却和倒计时\n      this.slowMotionReady = false;\n      this.slowMotionCooldownTime = this.slowMotionCooldown / 1000;\n      this.updateCooldown();\n\n      // 5秒后恢复正常速度\n      setTimeout(() => {\n        this.currentLevelConfig = originalConfig;\n      }, 5000);\n\n      setTimeout(() => {\n        this.slowMotionReady = true;\n        this.slowMotionCooldownTime = 0;\n      }, this.slowMotionCooldown);\n    },\n    updateCooldown() {\n      if (this.cooldownTimer) {\n        clearInterval(this.cooldownTimer);\n      }\n      \n      this.cooldownTimer = setInterval(() => {\n        if (this.bombCooldownTime > 0) {\n          this.bombCooldownTime--;\n        }\n        if (this.slowMotionCooldownTime > 0) {\n          this.slowMotionCooldownTime--;\n        }\n        if (this.bombCooldownTime === 0 && this.slowMotionCooldownTime === 0) {\n          clearInterval(this.cooldownTimer);\n        }\n      }, 1000);\n    },\n    handleKeyPress(event) {\n      if (!this.gameStarted || this.gameOver) return;\n      \n      switch(event.key) {\n        case ' ': // 空格键\n          event.preventDefault(); // 防止页面滚动\n          this.useBomb();\n          break;\n        case 'Shift': // Shift键\n          event.preventDefault();\n          this.useSlowMotion();\n          break;\n        case 'Escape':\n          event.preventDefault();\n          this.togglePause();\n          break;\n      }\n    },\n    playSound(soundName) {\n      if (!this.isMuted && this.sounds[soundName]) {\n        this.sounds[soundName].currentTime = 0;\n        this.sounds[soundName].play();\n      }\n    },\n    toggleSound() {\n      this.isMuted = !this.isMuted;\n      if (this.isMuted) {\n        this.sounds.bgm.pause();\n      } else {\n        this.sounds.bgm.play();\n      }\n    },\n    spawnPowerup() {\n      if (Math.random() < 0.05) { // 5%的概率生成道具\n        const types = Object.values(this.powerupTypes);\n        const randomType = types[Math.floor(Math.random() * types.length)];\n        \n        const powerup = {\n          x: Math.random() * (this.canvasWidth - 30),\n          y: -30,\n          width: 30,\n          height: 30,\n          type: randomType,\n          speed: 2\n        };\n        \n        this.powerups.push(powerup);\n      }\n    },\n    updatePowerups() {\n      this.powerups = this.powerups.filter(powerup => {\n        powerup.y += powerup.speed;\n        \n        // 检查玩家是否收集到道具\n        if (checkCollision(this.player, powerup)) {\n          this.collectPowerup(powerup.type);\n          return false;\n        }\n        \n        return powerup.y < this.canvasHeight;\n      });\n    },\n    collectPowerup(type) {\n      this.playSound('powerup');\n      const duration = 10000; // 10秒持续时间\n      \n      switch(type) {\n        case this.powerupTypes.SHIELD:\n          this.playerPowerups.shield = true;\n          setTimeout(() => this.playerPowerups.shield = false, duration);\n          break;\n        case this.powerupTypes.RAPID_FIRE:\n          this.playerPowerups.rapidFire = true;\n          setTimeout(() => this.playerPowerups.rapidFire = false, duration);\n          break;\n        case this.powerupTypes.DOUBLE_SCORE:\n          this.playerPowerups.doubleScore = true;\n          setTimeout(() => this.playerPowerups.doubleScore = false, duration);\n          break;\n      }\n    },\n    togglePause() {\n      this.isPaused = !this.isPaused;\n      if (this.isPaused) {\n        cancelAnimationFrame(this.animationFrameId);\n      } else {\n        this.gameLoop();\n      }\n    }\n  },\n  beforeDestroy() {\n    window.removeEventListener('keydown', this.handleKeyPress);\n    if (this.animationFrameId) {\n      cancelAnimationFrame(this.animationFrameId);\n    }\n    if (this.cooldownTimer) {\n      clearInterval(this.cooldownTimer);\n    }\n  }\n}\n</script>\n\n<style scoped>\n.game-container {\n  position: relative;\n  width: 400px;\n  margin: 0 auto;\n}\n\n.game-info {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  text-align: right;\n  color: #fff;\n  text-shadow: 1px 1px 2px rgba(0,0,0,0.8);\n}\n\n.score, .level, .next-level {\n  margin-bottom: 5px;\n  font-size: 18px;\n}\n\ncanvas {\n  border: 1px solid #000;\n  background: linear-gradient(to bottom, #87CEEB, #1E90FF);\n}\n\n.start-screen,\n.game-over {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0,0,0,0.3);\n}\n\nbutton {\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  transition: background-color 0.3s;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n\n.skills {\n  position: absolute;\n  bottom: 20px;\n  left: 50%;\n  transform: translateX(-50%);\n  display: flex;\n  gap: 10px;\n}\n\n.skill-btn {\n  position: relative;\n  padding: 5px 10px;\n  background: rgba(0, 0, 0, 0.6);\n  color: white;\n  border: 1px solid white;\n  cursor: pointer;\n}\n\n.skill-btn .cooldown {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: rgba(0, 0, 0, 0.8);\n  padding: 2px 6px;\n  border-radius: 3px;\n  font-size: 14px;\n}\n\n.skill-btn:disabled {\n  opacity: 0.5;\n  cursor: not-allowed;\n}\n\n.cooldown {\n  font-size: 12px;\n  margin-left: 5px;\n}\n\n.pause-screen {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  background: rgba(0, 0, 0, 0.8);\n  padding: 20px;\n  border-radius: 10px;\n  color: white;\n  text-align: center;\n}\n\n.sound-btn {\n  position: absolute;\n  top: 10px;\n  left: 10px;\n  padding: 5px 10px;\n  background: rgba(0, 0, 0, 0.6);\n  color: white;\n  border: 1px solid white;\n}\n\n.powerup-status {\n  position: absolute;\n  top: 50px;\n  left: 10px;\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n}\n\n.powerup-icon {\n  padding: 5px 10px;\n  background: rgba(0, 0, 0, 0.6);\n  color: white;\n  border-radius: 5px;\n  font-size: 14px;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}