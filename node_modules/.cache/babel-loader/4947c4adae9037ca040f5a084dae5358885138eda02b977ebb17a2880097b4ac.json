{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { GAME_CONSTANTS } from '../utils/gameConstants';\nimport { checkCollision } from '../utils/collision';\nimport playerImage from '../assets/images/player.png';\nimport enemyImage from '../assets/images/enemy.png';\nimport bulletImage from '../assets/images/bullet.png';\nexport default {\n  name: 'GameCanvas',\n  data: function data() {\n    return {\n      canvasWidth: 400,\n      canvasHeight: 600,\n      ctx: null,\n      gameStarted: false,\n      gameOver: false,\n      score: 0,\n      player: {\n        x: 200,\n        y: 500,\n        width: 60,\n        height: 80,\n        speed: 5,\n        image: null\n      },\n      bullets: [],\n      enemies: [],\n      animationFrameId: null,\n      images: {\n        player: null,\n        enemy: null,\n        bullet: null\n      },\n      currentLevel: 1,\n      nextLevelScore: GAME_CONSTANTS.LEVELS[0].scoreToNext,\n      currentLevelConfig: GAME_CONSTANTS.LEVELS[0],\n      bombReady: true,\n      slowMotionReady: true,\n      bombCooldown: 10000,\n      // 10秒冷却\n      slowMotionCooldown: 15000\n    };\n  },\n  mounted: function mounted() {\n    this.initCanvas();\n    this.loadImages();\n  },\n  methods: {\n    loadImages: function loadImages() {\n      // 加载玩家飞机图片\n      this.images.player = new Image();\n      this.images.player.src = playerImage;\n\n      // 加载敌机图片\n      this.images.enemy = new Image();\n      this.images.enemy.src = enemyImage;\n\n      // 加载子弹图片\n      this.images.bullet = new Image();\n      this.images.bullet.src = bulletImage;\n    },\n    initCanvas: function initCanvas() {\n      var canvas = this.$refs.gameCanvas;\n      this.ctx = canvas.getContext('2d');\n    },\n    startGame: function startGame() {\n      this.gameStarted = true;\n      this.gameOver = false;\n      this.score = 0;\n      this.currentLevel = 1;\n      this.currentLevelConfig = GAME_CONSTANTS.LEVELS[0];\n      this.nextLevelScore = this.currentLevelConfig.scoreToNext;\n      this.bullets = [];\n      this.enemies = [];\n      this.gameLoop();\n    },\n    gameLoop: function gameLoop() {\n      this.update();\n      this.draw();\n      this.animationFrameId = requestAnimationFrame(this.gameLoop);\n    },\n    update: function update() {\n      // 更新游戏状态\n      this.updateBullets();\n      this.updateEnemies();\n      this.checkCollisions();\n    },\n    draw: function draw() {\n      // 清空画布\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n      // 绘制玩家\n      this.drawPlayer();\n      // 绘制子弹\n      this.drawBullets();\n      // 绘制敌机\n      this.drawEnemies();\n    },\n    handleMouseMove: function handleMouseMove(e) {\n      if (!this.gameStarted || this.gameOver) return;\n      var rect = this.$refs.gameCanvas.getBoundingClientRect();\n      var x = e.clientX - rect.left;\n      this.player.x = Math.max(0, Math.min(x - this.player.width / 2, this.canvasWidth - this.player.width));\n    },\n    handleClick: function handleClick() {\n      if (!this.gameStarted || this.gameOver) return;\n      this.shoot();\n    },\n    drawPlayer: function drawPlayer() {\n      if (this.images.player) {\n        this.ctx.drawImage(this.images.player, this.player.x, this.player.y, this.player.width, this.player.height);\n      }\n    },\n    shoot: function shoot() {\n      var _this = this;\n      var bulletCount = this.currentLevelConfig.bulletCount;\n      var spread = this.currentLevelConfig.bulletSpread;\n\n      // 计算子弹发射角度\n      var angles = [];\n      if (bulletCount === 1) {\n        angles.push(0); // 单发子弹直射\n      } else {\n        // 计算多发子弹的角度\n        var step = spread * 2 / (bulletCount - 1);\n        for (var i = 0; i < bulletCount; i++) {\n          angles.push(-spread + step * i);\n        }\n      }\n\n      // 发射子弹\n      angles.forEach(function (angle) {\n        var radian = angle * Math.PI / 180;\n        var bullet = {\n          x: _this.player.x + _this.player.width / 2 - GAME_CONSTANTS.BULLET_WIDTH / 2,\n          y: _this.player.y,\n          width: GAME_CONSTANTS.BULLET_WIDTH,\n          height: GAME_CONSTANTS.BULLET_HEIGHT,\n          speedX: Math.sin(radian) * GAME_CONSTANTS.BULLET_SPEED,\n          speedY: -Math.cos(radian) * GAME_CONSTANTS.BULLET_SPEED\n        };\n        _this.bullets.push(bullet);\n      });\n    },\n    updateBullets: function updateBullets() {\n      var _this2 = this;\n      this.bullets = this.bullets.filter(function (bullet) {\n        // 更新子弹位置，加入水平移动\n        bullet.x += bullet.speedX;\n        bullet.y += bullet.speedY;\n\n        // 检查子弹是否在画布范围内\n        return bullet.y + bullet.height > 0 && bullet.x + bullet.width > 0 && bullet.x < _this2.canvasWidth;\n      });\n    },\n    drawBullets: function drawBullets() {\n      var _this3 = this;\n      if (this.images.bullet) {\n        this.bullets.forEach(function (bullet) {\n          // 根据子弹角度旋转画布\n          _this3.ctx.save();\n          var angle = Math.atan2(bullet.speedX, -bullet.speedY);\n          _this3.ctx.translate(bullet.x + bullet.width / 2, bullet.y + bullet.height / 2);\n          _this3.ctx.rotate(angle);\n          _this3.ctx.drawImage(_this3.images.bullet, -bullet.width / 2, -bullet.height / 2, bullet.width, bullet.height);\n          _this3.ctx.restore();\n        });\n      }\n    },\n    spawnEnemy: function spawnEnemy() {\n      var enemy = {\n        x: Math.random() * (this.canvasWidth - GAME_CONSTANTS.ENEMY_WIDTH),\n        y: -GAME_CONSTANTS.ENEMY_HEIGHT,\n        width: GAME_CONSTANTS.ENEMY_WIDTH,\n        height: GAME_CONSTANTS.ENEMY_HEIGHT,\n        speed: GAME_CONSTANTS.ENEMY_SPEED\n      };\n      this.enemies.push(enemy);\n    },\n    updateEnemies: function updateEnemies() {\n      var _this4 = this;\n      this.enemies = this.enemies.filter(function (enemy) {\n        enemy.y += _this4.currentLevelConfig.enemySpeed;\n        return enemy.y < _this4.canvasHeight;\n      });\n      if (Math.random() < this.currentLevelConfig.spawnRate) {\n        this.spawnEnemy();\n      }\n    },\n    drawEnemies: function drawEnemies() {\n      var _this5 = this;\n      if (this.images.enemy) {\n        this.enemies.forEach(function (enemy) {\n          _this5.ctx.drawImage(_this5.images.enemy, enemy.x, enemy.y, enemy.width, enemy.height);\n        });\n      }\n    },\n    checkCollisions: function checkCollisions() {\n      var _this6 = this;\n      // 检查子弹与敌机的碰撞\n      this.bullets.forEach(function (bullet, bulletIndex) {\n        _this6.enemies.forEach(function (enemy, enemyIndex) {\n          if (checkCollision(bullet, enemy)) {\n            _this6.bullets.splice(bulletIndex, 1);\n            _this6.enemies.splice(enemyIndex, 1);\n            _this6.score += 100;\n            _this6.checkLevelUp();\n          }\n        });\n      });\n\n      // 检查玩家与敌机的碰撞\n      this.enemies.forEach(function (enemy) {\n        if (checkCollision(_this6.player, enemy)) {\n          _this6.endGame();\n        }\n      });\n    },\n    endGame: function endGame() {\n      this.gameOver = true;\n      cancelAnimationFrame(this.animationFrameId);\n    },\n    restartGame: function restartGame() {\n      this.startGame();\n    },\n    checkLevelUp: function checkLevelUp() {\n      if (this.score >= this.nextLevelScore && this.currentLevel < 5) {\n        this.currentLevel++;\n        this.currentLevelConfig = GAME_CONSTANTS.LEVELS[this.currentLevel - 1];\n        this.nextLevelScore = this.currentLevelConfig.scoreToNext;\n        this.showLevelUpMessage();\n      }\n    },\n    showLevelUpMessage: function showLevelUpMessage() {\n      var ctx = this.ctx;\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n      ctx.fillRect(this.canvasWidth / 4, this.canvasHeight / 2 - 40, this.canvasWidth / 2, 80);\n      ctx.fillStyle = '#000';\n      ctx.font = '24px Arial';\n      ctx.textAlign = 'center';\n      ctx.fillText(\"\\u5347\\u7EA7\\u5230\\u7B2C \".concat(this.currentLevel, \" \\u5173\\uFF01\"), this.canvasWidth / 2, this.canvasHeight / 2);\n    }\n  }\n};","map":{"version":3,"names":["GAME_CONSTANTS","checkCollision","playerImage","enemyImage","bulletImage","name","data","canvasWidth","canvasHeight","ctx","gameStarted","gameOver","score","player","x","y","width","height","speed","image","bullets","enemies","animationFrameId","images","enemy","bullet","currentLevel","nextLevelScore","LEVELS","scoreToNext","currentLevelConfig","bombReady","slowMotionReady","bombCooldown","slowMotionCooldown","mounted","initCanvas","loadImages","methods","Image","src","canvas","$refs","gameCanvas","getContext","startGame","gameLoop","update","draw","requestAnimationFrame","updateBullets","updateEnemies","checkCollisions","clearRect","drawPlayer","drawBullets","drawEnemies","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","Math","max","min","handleClick","shoot","drawImage","_this","bulletCount","spread","bulletSpread","angles","push","step","i","forEach","angle","radian","PI","BULLET_WIDTH","BULLET_HEIGHT","speedX","sin","BULLET_SPEED","speedY","cos","_this2","filter","_this3","save","atan2","translate","rotate","restore","spawnEnemy","random","ENEMY_WIDTH","ENEMY_HEIGHT","ENEMY_SPEED","_this4","enemySpeed","spawnRate","_this5","_this6","bulletIndex","enemyIndex","splice","checkLevelUp","endGame","cancelAnimationFrame","restartGame","showLevelUpMessage","fillStyle","fillRect","font","textAlign","fillText","concat"],"sources":["src/components/GameCanvas.vue"],"sourcesContent":["<template>\n  <div class=\"game-container\">\n    <canvas\n      ref=\"gameCanvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousemove=\"handleMouseMove\"\n      @click=\"handleClick\"\n    ></canvas>\n    <div class=\"game-info\">\n      <div class=\"score\">得分: {{ score }}</div>\n      <div class=\"level\">关卡: {{ currentLevel }}</div>\n      <div class=\"next-level\" v-if=\"currentLevel < 5\">\n        距离下一关: {{ nextLevelScore - score }}\n      </div>\n    </div>\n    <div v-if=\"!gameStarted\" class=\"start-screen\">\n      <h2>飞机大战</h2>\n      <p>点击开始游戏</p>\n      <button @click=\"startGame\">开始游戏</button>\n    </div>\n    <div v-if=\"gameOver\" class=\"game-over\">\n      <h2>游戏结束</h2>\n      <p>最终得分: {{ score }}</p>\n      <p>达到关卡: {{ currentLevel }}</p>\n      <button @click=\"restartGame\">重新开始</button>\n    </div>\n    <div class=\"skills\">\n      <button \n        @click=\"useBomb\" \n        :disabled=\"!bombReady\"\n        class=\"skill-btn\"\n      >\n        炸弹 (空格键)\n      </button>\n      <button \n        @click=\"useSlowMotion\" \n        :disabled=\"!slowMotionReady\"\n        class=\"skill-btn\"\n      >\n        时间减速 (Shift键)\n      </button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { GAME_CONSTANTS } from '../utils/gameConstants'\nimport { checkCollision } from '../utils/collision'\nimport playerImage from '../assets/images/player.png'\nimport enemyImage from '../assets/images/enemy.png'\nimport bulletImage from '../assets/images/bullet.png'\n\nexport default {\n  name: 'GameCanvas',\n  data() {\n    return {\n      canvasWidth: 400,\n      canvasHeight: 600,\n      ctx: null,\n      gameStarted: false,\n      gameOver: false,\n      score: 0,\n      player: {\n        x: 200,\n        y: 500,\n        width: 60,\n        height: 80,\n        speed: 5,\n        image: null\n      },\n      bullets: [],\n      enemies: [],\n      animationFrameId: null,\n      images: {\n        player: null,\n        enemy: null,\n        bullet: null\n      },\n      currentLevel: 1,\n      nextLevelScore: GAME_CONSTANTS.LEVELS[0].scoreToNext,\n      currentLevelConfig: GAME_CONSTANTS.LEVELS[0],\n      bombReady: true,\n      slowMotionReady: true,\n      bombCooldown: 10000, // 10秒冷却\n      slowMotionCooldown: 15000\n    }\n  },\n  mounted() {\n    this.initCanvas()\n    this.loadImages()\n  },\n  methods: {\n    loadImages() {\n      // 加载玩家飞机图片\n      this.images.player = new Image()\n      this.images.player.src = playerImage\n      \n      // 加载敌机图片\n      this.images.enemy = new Image()\n      this.images.enemy.src = enemyImage\n      \n      // 加载子弹图片\n      this.images.bullet = new Image()\n      this.images.bullet.src = bulletImage\n    },\n    initCanvas() {\n      const canvas = this.$refs.gameCanvas\n      this.ctx = canvas.getContext('2d')\n    },\n    startGame() {\n      this.gameStarted = true\n      this.gameOver = false\n      this.score = 0\n      this.currentLevel = 1\n      this.currentLevelConfig = GAME_CONSTANTS.LEVELS[0]\n      this.nextLevelScore = this.currentLevelConfig.scoreToNext\n      this.bullets = []\n      this.enemies = []\n      this.gameLoop()\n    },\n    gameLoop() {\n      this.update()\n      this.draw()\n      this.animationFrameId = requestAnimationFrame(this.gameLoop)\n    },\n    update() {\n      // 更新游戏状态\n      this.updateBullets()\n      this.updateEnemies()\n      this.checkCollisions()\n    },\n    draw() {\n      // 清空画布\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\n      // 绘制玩家\n      this.drawPlayer()\n      // 绘制子弹\n      this.drawBullets()\n      // 绘制敌机\n      this.drawEnemies()\n    },\n    handleMouseMove(e) {\n      if (!this.gameStarted || this.gameOver) return\n      const rect = this.$refs.gameCanvas.getBoundingClientRect()\n      const x = e.clientX - rect.left\n      this.player.x = Math.max(0, Math.min(x - this.player.width / 2, this.canvasWidth - this.player.width))\n    },\n    handleClick() {\n      if (!this.gameStarted || this.gameOver) return\n      this.shoot()\n    },\n    drawPlayer() {\n      if (this.images.player) {\n        this.ctx.drawImage(\n          this.images.player,\n          this.player.x,\n          this.player.y,\n          this.player.width,\n          this.player.height\n        )\n      }\n    },\n    shoot() {\n      const bulletCount = this.currentLevelConfig.bulletCount;\n      const spread = this.currentLevelConfig.bulletSpread;\n      \n      // 计算子弹发射角度\n      const angles = [];\n      if (bulletCount === 1) {\n        angles.push(0);  // 单发子弹直射\n      } else {\n        // 计算多发子弹的角度\n        const step = spread * 2 / (bulletCount - 1);\n        for (let i = 0; i < bulletCount; i++) {\n          angles.push(-spread + step * i);\n        }\n      }\n      \n      // 发射子弹\n      angles.forEach(angle => {\n        const radian = angle * Math.PI / 180;\n        const bullet = {\n          x: this.player.x + this.player.width / 2 - GAME_CONSTANTS.BULLET_WIDTH / 2,\n          y: this.player.y,\n          width: GAME_CONSTANTS.BULLET_WIDTH,\n          height: GAME_CONSTANTS.BULLET_HEIGHT,\n          speedX: Math.sin(radian) * GAME_CONSTANTS.BULLET_SPEED,\n          speedY: -Math.cos(radian) * GAME_CONSTANTS.BULLET_SPEED\n        }\n        this.bullets.push(bullet);\n      });\n    },\n    updateBullets() {\n      this.bullets = this.bullets.filter(bullet => {\n        // 更新子弹位置，加入水平移动\n        bullet.x += bullet.speedX;\n        bullet.y += bullet.speedY;\n        \n        // 检查子弹是否在画布范围内\n        return bullet.y + bullet.height > 0 && \n               bullet.x + bullet.width > 0 && \n               bullet.x < this.canvasWidth;\n      });\n    },\n    drawBullets() {\n      if (this.images.bullet) {\n        this.bullets.forEach(bullet => {\n          // 根据子弹角度旋转画布\n          this.ctx.save();\n          const angle = Math.atan2(bullet.speedX, -bullet.speedY);\n          this.ctx.translate(bullet.x + bullet.width/2, bullet.y + bullet.height/2);\n          this.ctx.rotate(angle);\n          this.ctx.drawImage(\n            this.images.bullet,\n            -bullet.width/2,\n            -bullet.height/2,\n            bullet.width,\n            bullet.height\n          );\n          this.ctx.restore();\n        });\n      }\n    },\n    spawnEnemy() {\n      const enemy = {\n        x: Math.random() * (this.canvasWidth - GAME_CONSTANTS.ENEMY_WIDTH),\n        y: -GAME_CONSTANTS.ENEMY_HEIGHT,\n        width: GAME_CONSTANTS.ENEMY_WIDTH,\n        height: GAME_CONSTANTS.ENEMY_HEIGHT,\n        speed: GAME_CONSTANTS.ENEMY_SPEED\n      }\n      this.enemies.push(enemy)\n    },\n    updateEnemies() {\n      this.enemies = this.enemies.filter(enemy => {\n        enemy.y += this.currentLevelConfig.enemySpeed\n        return enemy.y < this.canvasHeight\n      })\n\n      if (Math.random() < this.currentLevelConfig.spawnRate) {\n        this.spawnEnemy()\n      }\n    },\n    drawEnemies() {\n      if (this.images.enemy) {\n        this.enemies.forEach(enemy => {\n          this.ctx.drawImage(\n            this.images.enemy,\n            enemy.x,\n            enemy.y,\n            enemy.width,\n            enemy.height\n          )\n        })\n      }\n    },\n    checkCollisions() {\n      // 检查子弹与敌机的碰撞\n      this.bullets.forEach((bullet, bulletIndex) => {\n        this.enemies.forEach((enemy, enemyIndex) => {\n          if (checkCollision(bullet, enemy)) {\n            this.bullets.splice(bulletIndex, 1)\n            this.enemies.splice(enemyIndex, 1)\n            this.score += 100\n            this.checkLevelUp()\n          }\n        })\n      })\n\n      // 检查玩家与敌机的碰撞\n      this.enemies.forEach(enemy => {\n        if (checkCollision(this.player, enemy)) {\n          this.endGame()\n        }\n      })\n    },\n    endGame() {\n      this.gameOver = true\n      cancelAnimationFrame(this.animationFrameId)\n    },\n    restartGame() {\n      this.startGame()\n    },\n    checkLevelUp() {\n      if (this.score >= this.nextLevelScore && this.currentLevel < 5) {\n        this.currentLevel++\n        this.currentLevelConfig = GAME_CONSTANTS.LEVELS[this.currentLevel - 1]\n        this.nextLevelScore = this.currentLevelConfig.scoreToNext\n        this.showLevelUpMessage()\n      }\n    },\n    showLevelUpMessage() {\n      const ctx = this.ctx\n      ctx.fillStyle = 'rgba(255, 255, 255, 0.8)'\n      ctx.fillRect(this.canvasWidth/4, this.canvasHeight/2 - 40, this.canvasWidth/2, 80)\n      ctx.fillStyle = '#000'\n      ctx.font = '24px Arial'\n      ctx.textAlign = 'center'\n      ctx.fillText(`升级到第 ${this.currentLevel} 关！`, this.canvasWidth/2, this.canvasHeight/2)\n    }\n  }\n}\n</script>\n\n<style scoped>\n.game-container {\n  position: relative;\n  width: 400px;\n  margin: 0 auto;\n}\n\n.game-info {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  text-align: right;\n  color: #fff;\n  text-shadow: 1px 1px 2px rgba(0,0,0,0.8);\n}\n\n.score, .level, .next-level {\n  margin-bottom: 5px;\n  font-size: 18px;\n}\n\ncanvas {\n  border: 1px solid #000;\n  background: linear-gradient(to bottom, #87CEEB, #1E90FF);\n}\n\n.start-screen,\n.game-over {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 20px;\n  border-radius: 10px;\n  box-shadow: 0 0 10px rgba(0,0,0,0.3);\n}\n\nbutton {\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  transition: background-color 0.3s;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}