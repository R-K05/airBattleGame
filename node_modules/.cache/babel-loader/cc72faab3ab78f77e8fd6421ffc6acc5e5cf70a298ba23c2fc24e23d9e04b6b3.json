{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { GAME_CONSTANTS } from '../utils/gameConstants';\nimport { checkCollision } from '../utils/collision';\nimport playerImage from '../assets/images/player.png';\nimport enemyImage from '../assets/images/enemy.png';\nimport bulletImage from '../assets/images/bullet.png';\nexport default {\n  name: 'GameCanvas',\n  data: function data() {\n    return {\n      canvasWidth: 400,\n      canvasHeight: 600,\n      ctx: null,\n      gameStarted: false,\n      gameOver: false,\n      score: 0,\n      player: {\n        x: 200,\n        y: 500,\n        width: 60,\n        height: 80,\n        speed: 5,\n        image: null\n      },\n      bullets: [],\n      enemies: [],\n      animationFrameId: null,\n      images: {\n        player: null,\n        enemy: null,\n        bullet: null\n      }\n    };\n  },\n  mounted: function mounted() {\n    this.initCanvas();\n    this.loadImages();\n  },\n  methods: {\n    loadImages: function loadImages() {\n      // 加载玩家飞机图片\n      this.images.player = new Image();\n      this.images.player.src = playerImage;\n\n      // 加载敌机图片\n      this.images.enemy = new Image();\n      this.images.enemy.src = enemyImage;\n\n      // 加载子弹图片\n      this.images.bullet = new Image();\n      this.images.bullet.src = bulletImage;\n    },\n    initCanvas: function initCanvas() {\n      var canvas = this.$refs.gameCanvas;\n      this.ctx = canvas.getContext('2d');\n    },\n    startGame: function startGame() {\n      this.gameStarted = true;\n      this.gameOver = false;\n      this.score = 0;\n      this.bullets = [];\n      this.enemies = [];\n      this.gameLoop();\n    },\n    gameLoop: function gameLoop() {\n      this.update();\n      this.draw();\n      this.animationFrameId = requestAnimationFrame(this.gameLoop);\n    },\n    update: function update() {\n      // 更新游戏状态\n      this.updateBullets();\n      this.updateEnemies();\n      this.checkCollisions();\n    },\n    draw: function draw() {\n      // 清空画布\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n      // 绘制玩家\n      this.drawPlayer();\n      // 绘制子弹\n      this.drawBullets();\n      // 绘制敌机\n      this.drawEnemies();\n    },\n    handleMouseMove: function handleMouseMove(e) {\n      if (!this.gameStarted || this.gameOver) return;\n      var rect = this.$refs.gameCanvas.getBoundingClientRect();\n      var x = e.clientX - rect.left;\n      this.player.x = Math.max(0, Math.min(x - this.player.width / 2, this.canvasWidth - this.player.width));\n    },\n    handleClick: function handleClick() {\n      if (!this.gameStarted || this.gameOver) return;\n      this.shoot();\n    },\n    drawPlayer: function drawPlayer() {\n      if (this.images.player) {\n        this.ctx.drawImage(this.images.player, this.player.x, this.player.y, this.player.width, this.player.height);\n      }\n    },\n    shoot: function shoot() {\n      var bullet = {\n        x: this.player.x + this.player.width / 2 - GAME_CONSTANTS.BULLET_WIDTH / 2,\n        y: this.player.y,\n        width: GAME_CONSTANTS.BULLET_WIDTH,\n        height: GAME_CONSTANTS.BULLET_HEIGHT\n      };\n      this.bullets.push(bullet);\n    },\n    updateBullets: function updateBullets() {\n      this.bullets = this.bullets.filter(function (bullet) {\n        bullet.y -= GAME_CONSTANTS.BULLET_SPEED;\n        return bullet.y + bullet.height > 0;\n      });\n    },\n    drawBullets: function drawBullets() {\n      var _this = this;\n      if (this.images.bullet) {\n        this.bullets.forEach(function (bullet) {\n          _this.ctx.drawImage(_this.images.bullet, bullet.x, bullet.y, bullet.width, bullet.height);\n        });\n      }\n    },\n    spawnEnemy: function spawnEnemy() {\n      var enemy = {\n        x: Math.random() * (this.canvasWidth - GAME_CONSTANTS.ENEMY_WIDTH),\n        y: -GAME_CONSTANTS.ENEMY_HEIGHT,\n        width: GAME_CONSTANTS.ENEMY_WIDTH,\n        height: GAME_CONSTANTS.ENEMY_HEIGHT,\n        speed: GAME_CONSTANTS.ENEMY_SPEED\n      };\n      this.enemies.push(enemy);\n    },\n    updateEnemies: function updateEnemies() {\n      var _this2 = this;\n      this.enemies = this.enemies.filter(function (enemy) {\n        enemy.y += GAME_CONSTANTS.ENEMY_SPEED;\n        return enemy.y < _this2.canvasHeight;\n      });\n      if (Math.random() < 0.02) {\n        // 2% 概率生成新敌机\n        this.spawnEnemy();\n      }\n    },\n    drawEnemies: function drawEnemies() {\n      var _this3 = this;\n      if (this.images.enemy) {\n        this.enemies.forEach(function (enemy) {\n          _this3.ctx.drawImage(_this3.images.enemy, enemy.x, enemy.y, enemy.width, enemy.height);\n        });\n      }\n    },\n    checkCollisions: function checkCollisions() {\n      var _this4 = this;\n      // 检查子弹与敌机的碰撞\n      this.bullets.forEach(function (bullet, bulletIndex) {\n        _this4.enemies.forEach(function (enemy, enemyIndex) {\n          if (checkCollision(bullet, enemy)) {\n            _this4.bullets.splice(bulletIndex, 1);\n            _this4.enemies.splice(enemyIndex, 1);\n            _this4.score += 100;\n          }\n        });\n      });\n\n      // 检查玩家与敌机的碰撞\n      this.enemies.forEach(function (enemy) {\n        if (checkCollision(_this4.player, enemy)) {\n          _this4.endGame();\n        }\n      });\n    },\n    endGame: function endGame() {\n      this.gameOver = true;\n      cancelAnimationFrame(this.animationFrameId);\n    },\n    restartGame: function restartGame() {\n      this.startGame();\n    }\n  }\n};","map":{"version":3,"names":["GAME_CONSTANTS","checkCollision","playerImage","enemyImage","bulletImage","name","data","canvasWidth","canvasHeight","ctx","gameStarted","gameOver","score","player","x","y","width","height","speed","image","bullets","enemies","animationFrameId","images","enemy","bullet","mounted","initCanvas","loadImages","methods","Image","src","canvas","$refs","gameCanvas","getContext","startGame","gameLoop","update","draw","requestAnimationFrame","updateBullets","updateEnemies","checkCollisions","clearRect","drawPlayer","drawBullets","drawEnemies","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","Math","max","min","handleClick","shoot","drawImage","BULLET_WIDTH","BULLET_HEIGHT","push","filter","BULLET_SPEED","_this","forEach","spawnEnemy","random","ENEMY_WIDTH","ENEMY_HEIGHT","ENEMY_SPEED","_this2","_this3","_this4","bulletIndex","enemyIndex","splice","endGame","cancelAnimationFrame","restartGame"],"sources":["src/components/GameCanvas.vue"],"sourcesContent":["<template>\n  <div class=\"game-container\">\n    <canvas\n      ref=\"gameCanvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousemove=\"handleMouseMove\"\n      @click=\"handleClick\"\n    ></canvas>\n    <div class=\"score\">得分: {{ score }}</div>\n    <div v-if=\"!gameStarted\" class=\"start-screen\">\n      <button @click=\"startGame\">开始游戏</button>\n    </div>\n    <div v-if=\"gameOver\" class=\"game-over\">\n      <h2>游戏结束</h2>\n      <p>最终得分: {{ score }}</p>\n      <button @click=\"restartGame\">重新开始</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { GAME_CONSTANTS } from '../utils/gameConstants'\nimport { checkCollision } from '../utils/collision'\nimport playerImage from '../assets/images/player.png'\nimport enemyImage from '../assets/images/enemy.png'\nimport bulletImage from '../assets/images/bullet.png'\n\nexport default {\n  name: 'GameCanvas',\n  data() {\n    return {\n      canvasWidth: 400,\n      canvasHeight: 600,\n      ctx: null,\n      gameStarted: false,\n      gameOver: false,\n      score: 0,\n      player: {\n        x: 200,\n        y: 500,\n        width: 60,\n        height: 80,\n        speed: 5,\n        image: null\n      },\n      bullets: [],\n      enemies: [],\n      animationFrameId: null,\n      images: {\n        player: null,\n        enemy: null,\n        bullet: null\n      }\n    }\n  },\n  mounted() {\n    this.initCanvas()\n    this.loadImages()\n  },\n  methods: {\n    loadImages() {\n      // 加载玩家飞机图片\n      this.images.player = new Image()\n      this.images.player.src = playerImage\n      \n      // 加载敌机图片\n      this.images.enemy = new Image()\n      this.images.enemy.src = enemyImage\n      \n      // 加载子弹图片\n      this.images.bullet = new Image()\n      this.images.bullet.src = bulletImage\n    },\n    initCanvas() {\n      const canvas = this.$refs.gameCanvas\n      this.ctx = canvas.getContext('2d')\n    },\n    startGame() {\n      this.gameStarted = true\n      this.gameOver = false\n      this.score = 0\n      this.bullets = []\n      this.enemies = []\n      this.gameLoop()\n    },\n    gameLoop() {\n      this.update()\n      this.draw()\n      this.animationFrameId = requestAnimationFrame(this.gameLoop)\n    },\n    update() {\n      // 更新游戏状态\n      this.updateBullets()\n      this.updateEnemies()\n      this.checkCollisions()\n    },\n    draw() {\n      // 清空画布\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\n      // 绘制玩家\n      this.drawPlayer()\n      // 绘制子弹\n      this.drawBullets()\n      // 绘制敌机\n      this.drawEnemies()\n    },\n    handleMouseMove(e) {\n      if (!this.gameStarted || this.gameOver) return\n      const rect = this.$refs.gameCanvas.getBoundingClientRect()\n      const x = e.clientX - rect.left\n      this.player.x = Math.max(0, Math.min(x - this.player.width / 2, this.canvasWidth - this.player.width))\n    },\n    handleClick() {\n      if (!this.gameStarted || this.gameOver) return\n      this.shoot()\n    },\n    drawPlayer() {\n      if (this.images.player) {\n        this.ctx.drawImage(\n          this.images.player,\n          this.player.x,\n          this.player.y,\n          this.player.width,\n          this.player.height\n        )\n      }\n    },\n    shoot() {\n      const bullet = {\n        x: this.player.x + this.player.width / 2 - GAME_CONSTANTS.BULLET_WIDTH / 2,\n        y: this.player.y,\n        width: GAME_CONSTANTS.BULLET_WIDTH,\n        height: GAME_CONSTANTS.BULLET_HEIGHT\n      }\n      this.bullets.push(bullet)\n    },\n    updateBullets() {\n      this.bullets = this.bullets.filter(bullet => {\n        bullet.y -= GAME_CONSTANTS.BULLET_SPEED\n        return bullet.y + bullet.height > 0\n      })\n    },\n    drawBullets() {\n      if (this.images.bullet) {\n        this.bullets.forEach(bullet => {\n          this.ctx.drawImage(\n            this.images.bullet,\n            bullet.x,\n            bullet.y,\n            bullet.width,\n            bullet.height\n          )\n        })\n      }\n    },\n    spawnEnemy() {\n      const enemy = {\n        x: Math.random() * (this.canvasWidth - GAME_CONSTANTS.ENEMY_WIDTH),\n        y: -GAME_CONSTANTS.ENEMY_HEIGHT,\n        width: GAME_CONSTANTS.ENEMY_WIDTH,\n        height: GAME_CONSTANTS.ENEMY_HEIGHT,\n        speed: GAME_CONSTANTS.ENEMY_SPEED\n      }\n      this.enemies.push(enemy)\n    },\n    updateEnemies() {\n      this.enemies = this.enemies.filter(enemy => {\n        enemy.y += GAME_CONSTANTS.ENEMY_SPEED\n        return enemy.y < this.canvasHeight\n      })\n\n      if (Math.random() < 0.02) { // 2% 概率生成新敌机\n        this.spawnEnemy()\n      }\n    },\n    drawEnemies() {\n      if (this.images.enemy) {\n        this.enemies.forEach(enemy => {\n          this.ctx.drawImage(\n            this.images.enemy,\n            enemy.x,\n            enemy.y,\n            enemy.width,\n            enemy.height\n          )\n        })\n      }\n    },\n    checkCollisions() {\n      // 检查子弹与敌机的碰撞\n      this.bullets.forEach((bullet, bulletIndex) => {\n        this.enemies.forEach((enemy, enemyIndex) => {\n          if (checkCollision(bullet, enemy)) {\n            this.bullets.splice(bulletIndex, 1)\n            this.enemies.splice(enemyIndex, 1)\n            this.score += 100\n          }\n        })\n      })\n\n      // 检查玩家与敌机的碰撞\n      this.enemies.forEach(enemy => {\n        if (checkCollision(this.player, enemy)) {\n          this.endGame()\n        }\n      })\n    },\n    endGame() {\n      this.gameOver = true\n      cancelAnimationFrame(this.animationFrameId)\n    },\n    restartGame() {\n      this.startGame()\n    }\n  }\n}\n</script>\n\n<style scoped>\n.game-container {\n  position: relative;\n  width: 400px;\n  margin: 0 auto;\n}\n\ncanvas {\n  border: 1px solid #000;\n  background: linear-gradient(to bottom, #87CEEB, #1E90FF);\n}\n\n.score {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n  color: #333;\n}\n\n.start-screen,\n.game-over {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 20px;\n  border-radius: 10px;\n}\n\nbutton {\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 5px;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}