{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport \"core-js/modules/es.iterator.constructor.js\";\nimport \"core-js/modules/es.iterator.filter.js\";\nimport \"core-js/modules/es.iterator.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport { GAME_CONSTANTS } from '../utils/gameConstants';\nimport { checkCollision } from '../utils/collision';\nexport default {\n  name: 'GameCanvas',\n  data: function data() {\n    return {\n      canvasWidth: 400,\n      canvasHeight: 600,\n      ctx: null,\n      gameStarted: false,\n      gameOver: false,\n      score: 0,\n      player: {\n        x: 200,\n        y: 500,\n        width: 50,\n        height: 50,\n        speed: 5\n      },\n      bullets: [],\n      enemies: [],\n      animationFrameId: null\n    };\n  },\n  mounted: function mounted() {\n    this.initCanvas();\n  },\n  methods: {\n    initCanvas: function initCanvas() {\n      var canvas = this.$refs.gameCanvas;\n      this.ctx = canvas.getContext('2d');\n    },\n    startGame: function startGame() {\n      this.gameStarted = true;\n      this.gameOver = false;\n      this.score = 0;\n      this.bullets = [];\n      this.enemies = [];\n      this.gameLoop();\n    },\n    gameLoop: function gameLoop() {\n      this.update();\n      this.draw();\n      this.animationFrameId = requestAnimationFrame(this.gameLoop);\n    },\n    update: function update() {\n      // 更新游戏状态\n      this.updateBullets();\n      this.updateEnemies();\n      this.checkCollisions();\n    },\n    draw: function draw() {\n      // 清空画布\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight);\n      // 绘制玩家\n      this.drawPlayer();\n      // 绘制子弹\n      this.drawBullets();\n      // 绘制敌机\n      this.drawEnemies();\n    },\n    handleMouseMove: function handleMouseMove(e) {\n      if (!this.gameStarted || this.gameOver) return;\n      var rect = this.$refs.gameCanvas.getBoundingClientRect();\n      var x = e.clientX - rect.left;\n      this.player.x = Math.max(0, Math.min(x - this.player.width / 2, this.canvasWidth - this.player.width));\n    },\n    handleClick: function handleClick() {\n      if (!this.gameStarted || this.gameOver) return;\n      this.shoot();\n    },\n    drawPlayer: function drawPlayer() {\n      this.ctx.fillStyle = '#00f';\n      this.ctx.fillRect(this.player.x, this.player.y, this.player.width, this.player.height);\n    },\n    shoot: function shoot() {\n      var bullet = {\n        x: this.player.x + this.player.width / 2 - GAME_CONSTANTS.BULLET_WIDTH / 2,\n        y: this.player.y,\n        width: GAME_CONSTANTS.BULLET_WIDTH,\n        height: GAME_CONSTANTS.BULLET_HEIGHT\n      };\n      this.bullets.push(bullet);\n    },\n    updateBullets: function updateBullets() {\n      this.bullets = this.bullets.filter(function (bullet) {\n        bullet.y -= GAME_CONSTANTS.BULLET_SPEED;\n        return bullet.y + bullet.height > 0;\n      });\n    },\n    drawBullets: function drawBullets() {\n      var _this = this;\n      this.ctx.fillStyle = '#f00';\n      this.bullets.forEach(function (bullet) {\n        _this.ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height);\n      });\n    },\n    spawnEnemy: function spawnEnemy() {\n      var enemy = {\n        x: Math.random() * (this.canvasWidth - GAME_CONSTANTS.ENEMY_WIDTH),\n        y: -GAME_CONSTANTS.ENEMY_HEIGHT,\n        width: GAME_CONSTANTS.ENEMY_WIDTH,\n        height: GAME_CONSTANTS.ENEMY_HEIGHT\n      };\n      this.enemies.push(enemy);\n    },\n    updateEnemies: function updateEnemies() {\n      var _this2 = this;\n      this.enemies = this.enemies.filter(function (enemy) {\n        enemy.y += GAME_CONSTANTS.ENEMY_SPEED;\n        return enemy.y < _this2.canvasHeight;\n      });\n      if (Math.random() < 0.02) {\n        // 2% 概率生成新敌机\n        this.spawnEnemy();\n      }\n    },\n    drawEnemies: function drawEnemies() {\n      var _this3 = this;\n      this.ctx.fillStyle = '#0f0';\n      this.enemies.forEach(function (enemy) {\n        _this3.ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height);\n      });\n    },\n    checkCollisions: function checkCollisions() {\n      var _this4 = this;\n      // 检查子弹与敌机的碰撞\n      this.bullets.forEach(function (bullet, bulletIndex) {\n        _this4.enemies.forEach(function (enemy, enemyIndex) {\n          if (checkCollision(bullet, enemy)) {\n            _this4.bullets.splice(bulletIndex, 1);\n            _this4.enemies.splice(enemyIndex, 1);\n            _this4.score += 100;\n          }\n        });\n      });\n\n      // 检查玩家与敌机的碰撞\n      this.enemies.forEach(function (enemy) {\n        if (checkCollision(_this4.player, enemy)) {\n          _this4.endGame();\n        }\n      });\n    },\n    endGame: function endGame() {\n      this.gameOver = true;\n      cancelAnimationFrame(this.animationFrameId);\n    },\n    restartGame: function restartGame() {\n      this.startGame();\n    }\n  }\n};","map":{"version":3,"names":["GAME_CONSTANTS","checkCollision","name","data","canvasWidth","canvasHeight","ctx","gameStarted","gameOver","score","player","x","y","width","height","speed","bullets","enemies","animationFrameId","mounted","initCanvas","methods","canvas","$refs","gameCanvas","getContext","startGame","gameLoop","update","draw","requestAnimationFrame","updateBullets","updateEnemies","checkCollisions","clearRect","drawPlayer","drawBullets","drawEnemies","handleMouseMove","e","rect","getBoundingClientRect","clientX","left","Math","max","min","handleClick","shoot","fillStyle","fillRect","bullet","BULLET_WIDTH","BULLET_HEIGHT","push","filter","BULLET_SPEED","_this","forEach","spawnEnemy","enemy","random","ENEMY_WIDTH","ENEMY_HEIGHT","_this2","ENEMY_SPEED","_this3","_this4","bulletIndex","enemyIndex","splice","endGame","cancelAnimationFrame","restartGame"],"sources":["src/components/GameCanvas.vue"],"sourcesContent":["<template>\n  <div class=\"game-container\">\n    <canvas\n      ref=\"gameCanvas\"\n      :width=\"canvasWidth\"\n      :height=\"canvasHeight\"\n      @mousemove=\"handleMouseMove\"\n      @click=\"handleClick\"\n    ></canvas>\n    <div class=\"score\">得分: {{ score }}</div>\n    <div v-if=\"!gameStarted\" class=\"start-screen\">\n      <button @click=\"startGame\">开始游戏</button>\n    </div>\n    <div v-if=\"gameOver\" class=\"game-over\">\n      <h2>游戏结束</h2>\n      <p>最终得分: {{ score }}</p>\n      <button @click=\"restartGame\">重新开始</button>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { GAME_CONSTANTS } from '../utils/gameConstants'\nimport { checkCollision } from '../utils/collision'\n\nexport default {\n  name: 'GameCanvas',\n  data() {\n    return {\n      canvasWidth: 400,\n      canvasHeight: 600,\n      ctx: null,\n      gameStarted: false,\n      gameOver: false,\n      score: 0,\n      player: {\n        x: 200,\n        y: 500,\n        width: 50,\n        height: 50,\n        speed: 5\n      },\n      bullets: [],\n      enemies: [],\n      animationFrameId: null\n    }\n  },\n  mounted() {\n    this.initCanvas()\n  },\n  methods: {\n    initCanvas() {\n      const canvas = this.$refs.gameCanvas\n      this.ctx = canvas.getContext('2d')\n    },\n    startGame() {\n      this.gameStarted = true\n      this.gameOver = false\n      this.score = 0\n      this.bullets = []\n      this.enemies = []\n      this.gameLoop()\n    },\n    gameLoop() {\n      this.update()\n      this.draw()\n      this.animationFrameId = requestAnimationFrame(this.gameLoop)\n    },\n    update() {\n      // 更新游戏状态\n      this.updateBullets()\n      this.updateEnemies()\n      this.checkCollisions()\n    },\n    draw() {\n      // 清空画布\n      this.ctx.clearRect(0, 0, this.canvasWidth, this.canvasHeight)\n      // 绘制玩家\n      this.drawPlayer()\n      // 绘制子弹\n      this.drawBullets()\n      // 绘制敌机\n      this.drawEnemies()\n    },\n    handleMouseMove(e) {\n      if (!this.gameStarted || this.gameOver) return\n      const rect = this.$refs.gameCanvas.getBoundingClientRect()\n      const x = e.clientX - rect.left\n      this.player.x = Math.max(0, Math.min(x - this.player.width / 2, this.canvasWidth - this.player.width))\n    },\n    handleClick() {\n      if (!this.gameStarted || this.gameOver) return\n      this.shoot()\n    },\n    drawPlayer() {\n      this.ctx.fillStyle = '#00f'\n      this.ctx.fillRect(\n        this.player.x,\n        this.player.y,\n        this.player.width,\n        this.player.height\n      )\n    },\n    shoot() {\n      const bullet = {\n        x: this.player.x + this.player.width / 2 - GAME_CONSTANTS.BULLET_WIDTH / 2,\n        y: this.player.y,\n        width: GAME_CONSTANTS.BULLET_WIDTH,\n        height: GAME_CONSTANTS.BULLET_HEIGHT\n      }\n      this.bullets.push(bullet)\n    },\n    updateBullets() {\n      this.bullets = this.bullets.filter(bullet => {\n        bullet.y -= GAME_CONSTANTS.BULLET_SPEED\n        return bullet.y + bullet.height > 0\n      })\n    },\n    drawBullets() {\n      this.ctx.fillStyle = '#f00'\n      this.bullets.forEach(bullet => {\n        this.ctx.fillRect(bullet.x, bullet.y, bullet.width, bullet.height)\n      })\n    },\n    spawnEnemy() {\n      const enemy = {\n        x: Math.random() * (this.canvasWidth - GAME_CONSTANTS.ENEMY_WIDTH),\n        y: -GAME_CONSTANTS.ENEMY_HEIGHT,\n        width: GAME_CONSTANTS.ENEMY_WIDTH,\n        height: GAME_CONSTANTS.ENEMY_HEIGHT\n      }\n      this.enemies.push(enemy)\n    },\n    updateEnemies() {\n      this.enemies = this.enemies.filter(enemy => {\n        enemy.y += GAME_CONSTANTS.ENEMY_SPEED\n        return enemy.y < this.canvasHeight\n      })\n\n      if (Math.random() < 0.02) { // 2% 概率生成新敌机\n        this.spawnEnemy()\n      }\n    },\n    drawEnemies() {\n      this.ctx.fillStyle = '#0f0'\n      this.enemies.forEach(enemy => {\n        this.ctx.fillRect(enemy.x, enemy.y, enemy.width, enemy.height)\n      })\n    },\n    checkCollisions() {\n      // 检查子弹与敌机的碰撞\n      this.bullets.forEach((bullet, bulletIndex) => {\n        this.enemies.forEach((enemy, enemyIndex) => {\n          if (checkCollision(bullet, enemy)) {\n            this.bullets.splice(bulletIndex, 1)\n            this.enemies.splice(enemyIndex, 1)\n            this.score += 100\n          }\n        })\n      })\n\n      // 检查玩家与敌机的碰撞\n      this.enemies.forEach(enemy => {\n        if (checkCollision(this.player, enemy)) {\n          this.endGame()\n        }\n      })\n    },\n    endGame() {\n      this.gameOver = true\n      cancelAnimationFrame(this.animationFrameId)\n    },\n    restartGame() {\n      this.startGame()\n    }\n  }\n}\n</script>\n\n<style scoped>\n.game-container {\n  position: relative;\n  width: 400px;\n  margin: 0 auto;\n}\n\ncanvas {\n  border: 1px solid #000;\n  background-color: #f0f0f0;\n}\n\n.score {\n  position: absolute;\n  top: 10px;\n  right: 10px;\n  font-size: 20px;\n  color: #333;\n}\n\n.start-screen,\n.game-over {\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  text-align: center;\n  background: rgba(255, 255, 255, 0.9);\n  padding: 20px;\n  border-radius: 10px;\n}\n\nbutton {\n  padding: 10px 20px;\n  font-size: 16px;\n  cursor: pointer;\n  background-color: #4CAF50;\n  color: white;\n  border: none;\n  border-radius: 5px;\n}\n\nbutton:hover {\n  background-color: #45a049;\n}\n</style> "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}